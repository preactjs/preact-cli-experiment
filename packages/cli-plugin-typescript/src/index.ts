import fs from "fs";
import path from "path";
import { promisify } from "util";
import ForkTSChecker from "fork-ts-checker-webpack-plugin";
import { PluginAPI, CLIArguments } from "@preact/cli";

const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);

export const build = addTypeScript;
export const watch = addTypeScript;

export async function install(api: PluginAPI, { cwd }: CLIArguments) {
	api.setStatus("Writing TypeScript configuration to disk");
	const tsconfigPath = path.resolve(cwd, "tsconfig.json");
	const oldAppPath = path.resolve(cwd, "src", "App.jsx");
	const newAppPath = path.resolve(cwd, "src", "App.tsx");
	if (fs.existsSync(oldAppPath)) fs.renameSync(oldAppPath, newAppPath);
	if (!fs.existsSync(tsconfigPath)) {
		await api.writeFileTree({
			"tsconfig.json": JSON.stringify(
				{
					compilerOptions: {
						target: "es5",
						module: "esnext",
						moduleResolution: "node",
						outDir: "build",
						allowJs: true,
						jsx: "react",
						jsxFactory: "h",
						strict: true,
						esModuleInterop: true,
					},
				},
				null,
				"\t"
			),
		});
	} else {
		const config = JSON.parse(await readFile(tsconfigPath).then((b) => b.toString()));
		const updatedConf: any = Object.assign({}, config);
		updatedConf.compilerOptions = Object.assign(updatedConf.compilerOptions, {
			target: "es5",
			module: "esnext",
			moduleResolution: "node",
			allowJs: true,
			jsx: "react",
			jsxFactory: "h",
			strict: true,
			esModuleInterop: true,
		});
		await writeFile(tsconfigPath, JSON.stringify(updatedConf, null, "\t"));
	}

	api.setStatus();
	api.setStatus("Done", "success");

	return {
		devDependencies: {
			typescript: "^3.6.3",
		},
	};
}

function addTypeScript(api: PluginAPI, { cwd }: CLIArguments) {
	const tsconfig = path.resolve(cwd, "tsconfig.json");
	const loader = require.resolve("typings-for-css-modules-loader");
	const options = {
		camelCase: true,
		banner: "// This file is automatically generated from your CSS. Any edits will be overwritten.",
		namedExport: true,
		silent: true,
	};
	api.chainWebpack((chain) => {
		chain.module
			.rule("external-styles")
			.use("css")
			.merge({ loader, options })
			.end()
			.end()
			.rule("user-styles")
			.use("css")
			.merge({ loader, options });

		return chain.module
			.rule("typescript")
			.test(/\.tsx?$/)
			.use("ts")
			.loader(require.resolve("ts-loader"))
			.options({ transpileOnly: true, configFile: tsconfig })
			.end()
			.end()
			.end()
			.plugin("ts-checker")
			.use(ForkTSChecker, [{ tsconfig }])
			.end()
			.resolve.extensions.merge([".ts", ".tsx"])
			.end()
			.end();
	});
}
